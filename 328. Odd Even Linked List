# https://leetcode.com/problems/odd-even-linked-list/description/
#works better

class Solution(object):
    def oddEvenList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        if head is None or head.next is None:
            return head

        evenhead = head.next
        odd, even = head, head.next

        while odd.next and even.next:

            odd.next = even.next
            odd = even.next
            even.next = odd.next
            even = odd.next
        

        odd.next = evenhead

        return head

#-----------------
# don't forget the edge cases (when empty or 1 element)
class Solution(object):
    def oddEvenList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head

        prev = head
        even = head.next
        evenHead = even

        node = head.next.next
        count = 1
        while (node != None):
            if count %2 == 0:
                even.next = node
                even = node

            else:
                prev.next = node
                prev = node


            node = node.next
            count += 1

        even.next = None
        prev.next = evenHead
        


        return head
